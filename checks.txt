F841 Local variable `basic_policy_attachment` is assigned to but never used
  --> infrastructure/app_layer/iam_policies.py:51:5
   |
50 |     # Attach basic Lambda execution policy
51 |     basic_policy_attachment = aws.iam.RolePolicyAttachment(
   |     ^^^^^^^^^^^^^^^^^^^^^^^
52 |         f"{name_prefix}-basic-policy",
53 |         role=role.name,
   |
help: Remove assignment to unused variable `basic_policy_attachment`

T201 `print` found
  --> infrastructure/bootstrap/bootstrap.py:14:5
   |
12 | def deploy_bootstrap_stack():
13 |     # Bootstrap Stack: Create S3 bucket and DynamoDB table for Pulumi state storage
14 |     print("Deploying bootstrap infrastructure for state storage...")
   |     ^^^^^
15 |
16 |     # Create the S3 bucket for storing Pulumi state
   |
help: Remove `print`

N999 Invalid module name: 'dynamoDB'
--> infrastructure/common/dynamoDB.py:1:1

W191 Indentation contains tabs
 --> policies/python/__main__.py:6:1
  |
5 | def _register() -> None:
6 |     current_dir = Path(__file__).parent
  | ^^^^
7 |     sys.path.insert(0, str(current_dir))
  |

W191 Indentation contains tabs
 --> policies/python/__main__.py:7:1
  |
5 | def _register() -> None:
6 |     current_dir = Path(__file__).parent
7 |     sys.path.insert(0, str(current_dir))
  | ^^^^
8 |
9 |     from policies import register_policy_pack  # type: ignore import
  |

W191 Indentation contains tabs
  --> policies/python/__main__.py:9:1
   |
 7 |     sys.path.insert(0, str(current_dir))
 8 |
 9 |     from policies import register_policy_pack  # type: ignore import
   | ^^^^
10 |
11 |     register_policy_pack()
   |

W191 Indentation contains tabs
  --> policies/python/__main__.py:11:1
   |
 9 |     from policies import register_policy_pack  # type: ignore import
10 |
11 |     register_policy_pack()
   | ^^^^
   |

W191 Indentation contains tabs
  --> policies/python/__main__.py:15:1
   |
14 | if __name__ == "__main__":
15 |     _register()
   | ^^^^
   |

S105 Possible hardcoded password assigned to: "token"
   --> tests/common.py:268:26
    |
266 |         Mock AWS provider calls for data sources and functions.
267 |         """
268 |         if args.token == "aws:index/getCallerIdentity:getCallerIdentity":
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
269 |             return {
270 |                 "accountId": "123456789012",
    |

S105 Possible hardcoded password assigned to: "token"
   --> tests/common.py:274:28
    |
272 |                 "userId": "AIDACKCEVSQ6C2EXAMPLE",
273 |             }
274 |         elif args.token == "aws:index/getRegion:getRegion":
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
275 |             return {
276 |                 "name": "us-west-2",
    |

S105 Possible hardcoded password assigned to: "token"
   --> tests/common.py:279:28
    |
277 |                 "description": "US West (Oregon)",
278 |             }
279 |         elif args.token == "aws:index/getAvailabilityZones:getAvailabilityZones":
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
280 |             return {
281 |                 "names": ["us-west-2a", "us-west-2b", "us-west-2c"],
    |

E402 Module level import not at top of file
  --> tests/test_s3_logic.py:22:1
   |
20 | setup_pulumi_mocks()
21 |
22 | from common.config import _config
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
23 | from common.s3 import create_s3_bucket
   |

E402 Module level import not at top of file
  --> tests/test_s3_logic.py:23:1
   |
22 | from common.config import _config
23 | from common.s3 import create_s3_bucket
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

PT009 Use a regular `assert` instead of unittest-style `assertEqual`
  --> tests/test_s3_logic.py:46:13
   |
44 |             # Your code should produce: "myapp-{account}-{region}"
45 |             expected_pattern = "myapp-123456789012-us-west-2"
46 |             self.assertEqual(
   |             ^^^^^^^^^^^^^^^^
47 |                 name,
48 |                 expected_pattern,
   |
help: Replace `assertEqual(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIsNotNone`
  --> tests/test_s3_logic.py:74:13
   |
72 |         def verify_no_versioning(name):
73 |             # Verify bucket was created
74 |             self.assertIsNotNone(name)
   |             ^^^^^^^^^^^^^^^^^^^^
75 |
76 |             # Verify that NO versioning resource was created
   |
help: Replace `assertIsNotNone(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIsNone`
  --> tests/test_s3_logic.py:77:13
   |
76 |             # Verify that NO versioning resource was created
77 |             self.assertIsNone(
   |             ^^^^^^^^^^^^^^^^^
78 |                 s3_resources.versioning,
79 |                 "Versioning resource should be None when versioning=False",
   |
help: Replace `assertIsNone(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIsNone`
  --> tests/test_s3_logic.py:83:13
   |
82 |             # Also verify encryption and public access block weren't created
83 |             self.assertIsNone(
   |             ^^^^^^^^^^^^^^^^^
84 |                 s3_resources.encryption,
85 |                 "Encryption resource should be None when encryption=False",
   |
help: Replace `assertIsNone(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIsNone`
  --> tests/test_s3_logic.py:87:13
   |
85 |                 "Encryption resource should be None when encryption=False",
86 |             )
87 |             self.assertIsNone(
   |             ^^^^^^^^^^^^^^^^^
88 |                 s3_resources.public_access_block,
89 |                 "Public access block should be None when public_access_block=False",
   |
help: Replace `assertIsNone(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIsNotNone`
   --> tests/test_s3_logic.py:114:13
    |
112 |         def verify_versioning_created(name):
113 |             # Verify bucket was created
114 |             self.assertIsNotNone(name)
    |             ^^^^^^^^^^^^^^^^^^^^
115 |
116 |             # Verify that versioning resource WAS created
    |
help: Replace `assertIsNotNone(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIsNotNone`
   --> tests/test_s3_logic.py:117:13
    |
116 |             # Verify that versioning resource WAS created
117 |             self.assertIsNotNone(
    |             ^^^^^^^^^^^^^^^^^^^^
118 |                 s3_resources.versioning,
119 |                 "Versioning resource should exist when versioning=True",
    |
help: Replace `assertIsNotNone(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIsNone`
   --> tests/test_s3_logic.py:123:13
    |
122 |             # Verify other features still disabled
123 |             self.assertIsNone(
    |             ^^^^^^^^^^^^^^^^^
124 |                 s3_resources.encryption,
125 |                 "Encryption resource should be None when encryption=False",
    |
help: Replace `assertIsNone(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIsNone`
   --> tests/test_s3_logic.py:127:13
    |
125 |                 "Encryption resource should be None when encryption=False",
126 |             )
127 |             self.assertIsNone(
    |             ^^^^^^^^^^^^^^^^^
128 |                 s3_resources.public_access_block,
129 |                 "Public access block should be None when public_access_block=False",
    |
help: Replace `assertIsNone(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIsNotNone`
   --> tests/test_s3_logic.py:153:13
    |
151 |         def verify_all_resources(name):
152 |             # Verify bucket was created
153 |             self.assertIsNotNone(name)
    |             ^^^^^^^^^^^^^^^^^^^^
154 |
155 |             # Verify ALL optional resources were created
    |
help: Replace `assertIsNotNone(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIsNotNone`
   --> tests/test_s3_logic.py:156:13
    |
155 |             # Verify ALL optional resources were created
156 |             self.assertIsNotNone(
    |             ^^^^^^^^^^^^^^^^^^^^
157 |                 s3_resources.versioning,
158 |                 "Versioning resource should exist when versioning=True",
    |
help: Replace `assertIsNotNone(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIsNotNone`
   --> tests/test_s3_logic.py:160:13
    |
158 |                 "Versioning resource should exist when versioning=True",
159 |             )
160 |             self.assertIsNotNone(
    |             ^^^^^^^^^^^^^^^^^^^^
161 |                 s3_resources.encryption,
162 |                 "Encryption resource should exist when encryption=True",
    |
help: Replace `assertIsNotNone(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIsNotNone`
   --> tests/test_s3_logic.py:164:13
    |
162 |                 "Encryption resource should exist when encryption=True",
163 |             )
164 |             self.assertIsNotNone(
    |             ^^^^^^^^^^^^^^^^^^^^
165 |                 s3_resources.public_access_block,
166 |                 "Public access block should exist when public_access_block=True",
    |
help: Replace `assertIsNotNone(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIsNotNone`
   --> tests/test_s3_logic.py:189:13
    |
187 |         def check_tags(tags):
188 |             # Your code should convert None to {}
189 |             self.assertIsNotNone(tags)
    |             ^^^^^^^^^^^^^^^^^^^^
190 |             self.assertIsInstance(tags, dict)
    |
help: Replace `assertIsNotNone(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIsInstance`
   --> tests/test_s3_logic.py:190:13
    |
188 |             # Your code should convert None to {}
189 |             self.assertIsNotNone(tags)
190 |             self.assertIsInstance(tags, dict)
    |             ^^^^^^^^^^^^^^^^^^^^^
191 |
192 |         return s3_resources.bucket.tags.apply(check_tags)
    |
help: Replace `assertIsInstance(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertNotEqual`
   --> tests/test_s3_logic.py:207:13
    |
205 |         def check_names(args):
206 |             name1, name2 = args
207 |             self.assertNotEqual(
    |             ^^^^^^^^^^^^^^^^^^^
208 |                 name1, name2, "Different prefixes should produce different bucket names"
209 |             )
    |
help: Replace `assertNotEqual(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIn`
   --> tests/test_s3_logic.py:210:13
    |
208 |                 name1, name2, "Different prefixes should produce different bucket names"
209 |             )
210 |             self.assertIn("app1", name1)
    |             ^^^^^^^^^^^^^
211 |             self.assertIn("app2", name2)
    |
help: Replace `assertIn(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIn`
   --> tests/test_s3_logic.py:211:13
    |
209 |             )
210 |             self.assertIn("app1", name1)
211 |             self.assertIn("app2", name2)
    |             ^^^^^^^^^^^^^
212 |
213 |         return pulumi.Output.all(
    |
help: Replace `assertIn(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertEqual`
   --> tests/test_s3_logic.py:237:9
    |
236 |         # Original tags should not be mutated
237 |         self.assertEqual(
    |         ^^^^^^^^^^^^^^^^
238 |             original_tags, tags_copy, "Function should not mutate input tags"
239 |         )
    |
help: Replace `assertEqual(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertEqual`
   --> tests/test_s3_logic.py:243:17
    |
241 |         def check_tags(bucket_tags):
242 |             for key, value in original_tags.items():
243 |                 self.assertEqual(bucket_tags[key], value)
    |                 ^^^^^^^^^^^^^^^^
244 |
245 |         return s3_resources.bucket.tags.apply(check_tags)
    |
help: Replace `assertEqual(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertEqual`
   --> tests/test_s3_logic.py:267:9
    |
266 |         # Verify config module is working
267 |         self.assertEqual(account_id, "123456789012")
    |         ^^^^^^^^^^^^^^^^
268 |         self.assertEqual(region_name, "us-west-2")
    |
help: Replace `assertEqual(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertEqual`
   --> tests/test_s3_logic.py:268:9
    |
266 |         # Verify config module is working
267 |         self.assertEqual(account_id, "123456789012")
268 |         self.assertEqual(region_name, "us-west-2")
    |         ^^^^^^^^^^^^^^^^
    |
help: Replace `assertEqual(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIn`
   --> tests/test_s3_logic.py:296:13
    |
294 |         def check_name(name):
295 |             # Even with empty prefix, should have account and region
296 |             self.assertIn("123456789012", name)
    |             ^^^^^^^^^^^^^
297 |             self.assertIn("us-west-2", name)
    |
help: Replace `assertIn(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIn`
   --> tests/test_s3_logic.py:297:13
    |
295 |             # Even with empty prefix, should have account and region
296 |             self.assertIn("123456789012", name)
297 |             self.assertIn("us-west-2", name)
    |             ^^^^^^^^^^^^^
298 |
299 |         return s3_resources.bucket.bucket.apply(check_name)
    |
help: Replace `assertIn(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertEqual`
   --> tests/test_s3_logic.py:324:13
    |
323 |         def check_tags(tags):
324 |             self.assertEqual(tags["Path"], "/app/component")
    |             ^^^^^^^^^^^^^^^^
325 |             self.assertEqual(tags["Version"], "v1.2.3-beta")
326 |             self.assertEqual(tags["Description"], "This has spaces and punctuation!")
    |
help: Replace `assertEqual(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertEqual`
   --> tests/test_s3_logic.py:325:13
    |
323 |         def check_tags(tags):
324 |             self.assertEqual(tags["Path"], "/app/component")
325 |             self.assertEqual(tags["Version"], "v1.2.3-beta")
    |             ^^^^^^^^^^^^^^^^
326 |             self.assertEqual(tags["Description"], "This has spaces and punctuation!")
    |
help: Replace `assertEqual(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertEqual`
   --> tests/test_s3_logic.py:326:13
    |
324 |             self.assertEqual(tags["Path"], "/app/component")
325 |             self.assertEqual(tags["Version"], "v1.2.3-beta")
326 |             self.assertEqual(tags["Description"], "This has spaces and punctuation!")
    |             ^^^^^^^^^^^^^^^^
327 |
328 |         return s3_resources.bucket.tags.apply(check_tags)
    |
help: Replace `assertEqual(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertTrue`
   --> tests/test_s3_logic.py:346:13
    |
345 |         def check_arn(arn):
346 |             self.assertTrue(
    |             ^^^^^^^^^^^^^^^
347 |                 arn.startswith("arn:aws:s3:::"),
348 |                 f"ARN should start with 'arn:aws:s3:::' but got: {arn}",
    |
help: Replace `assertTrue(...)` with `assert ...`

PT009 Use a regular `assert` instead of unittest-style `assertIn`
   --> tests/test_s3_logic.py:350:13
    |
348 |                 f"ARN should start with 'arn:aws:s3:::' but got: {arn}",
349 |             )
350 |             self.assertIn(
    |             ^^^^^^^^^^^^^
351 |                 "arn-test",
352 |                 arn,
    |
help: Replace `assertIn(...)` with `assert ...`

Found 42 errors.
No fixes available (31 hidden fixes can be enabled with the `--unsafe-fixes` option).
