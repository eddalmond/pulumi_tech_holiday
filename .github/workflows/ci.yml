name: CI/CD Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  lint-and-format:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.13-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install additional linting tools
        run: |
          poetry add --group dev ruff black isort mypy bandit safety

      - name: Run Ruff (linting)
        run: |
          poetry run ruff check . --output-format=github

      - name: Run Ruff (formatting check)
        run: |
          poetry run ruff format --check .

      - name: Run Black (formatting check)
        run: |
          poetry run black --check --diff .

      - name: Run isort (import sorting check)
        run: |
          poetry run isort --check-only --diff .

      - name: Run MyPy (type checking)
        run: |
          poetry run mypy infrastructure/ src/ --ignore-missing-imports

      - name: Run Bandit (security linting)
        run: |
          poetry run bandit -r infrastructure/ src/ -f json -o bandit-report.json || true
          poetry run bandit -r infrastructure/ src/

      - name: Run Safety (dependency vulnerability check)
        run: |
          poetry run safety check --json --output safety-report.json || true
          poetry run safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  pulumi-security-checks:
    name: Infrastructure Security & Compliance
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry and dependencies
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install project dependencies
        run: poetry install --no-interaction --no-root

      - name: Set up Node.js for policy pack
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Pulumi CLI
        run: |
          curl -fsSL https://get.pulumi.com | sh
          echo "${HOME}/.pulumi/bin" >> $GITHUB_PATH

      - name: Install AWSGuard policy pack dependencies
        working-directory: policies/awsguard
        run: npm install

      - name: Install Pulumi Policy as Code (optional advanced checks)
        run: |
          # Install pulumi policy pack for additional checks
          poetry run pip install pulumi-policy

      - name: Run Pulumi preview with AWSGuard
        run: |
          mkdir -p .pulumi
          poetry run pulumi login --cloud-url "file://$(pwd)/.pulumi"
          poetry run pulumi stack select dev --cwd infrastructure --non-interactive || \
            poetry run pulumi stack init dev --cwd infrastructure
          poetry run pulumi preview \
            --stack dev \
            --cwd infrastructure \
            --non-interactive \
            --policy-pack policies/awsguard

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.13-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Add test dependencies
        run: |
          poetry add --group dev pytest-cov pytest-html pytest-xdist

      - name: Run unit tests with coverage
        run: |
          poetry run pytest tests/ \
            --cov=infrastructure \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            --junit-xml=pytest-results.xml \
            --html=pytest-report.html \
            --self-contained-html \
            -v

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            pytest-results.xml
            pytest-report.html
            htmlcov/

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, pulumi-security-checks, unit-tests]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "Lint and Format: ${{ needs.lint-and-format.result }}"
          echo "Security Checks: ${{ needs.pulumi-security-checks.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"

          if [[ "${{ needs.lint-and-format.result }}" == "failure" || 
                "${{ needs.pulumi-security-checks.result }}" == "failure" || 
                "${{ needs.unit-tests.result }}" == "failure" ]]; then
            echo "❌ One or more CI checks failed"
            exit 1
          else
            echo "✅ All CI checks passed successfully"
          fi
